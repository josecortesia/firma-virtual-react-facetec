import "./css/style.css";
import "./agreement/Agreement.scripts";
import "./signature/Signature.scripts";
import "./choose/Choose.scripts";
import { Config } from "../Config";
import { FaceTecSDK } from "../core-sdk/FaceTecSDK.js/FaceTecSDK";
import { LivenessCheckProcessor } from "./processors/LivenessCheckProcessor";
import { EnrollmentProcessor } from "./processors/EnrollmentProcessor";
import { AuthenticateProcessor } from "./processors/AuthenticateProcessor";
import { SampleAppUtilities } from "./utilities/SampleAppUtilities";
import { PhotoIDMatchProcessor } from "./processors/PhotoIDMatchProcessor";
import { PhotoIDScanProcessor } from "./processors/PhotoIDScanProcessor";
import { ThemeHelpers } from "./utilities/ThemeHelpers";
import {
  FaceTecSessionResult,
  FaceTecIDScanResult,
} from "../core-sdk/FaceTecSDK.js/FaceTecPublicApi";
import { AdditionalScreens } from "./utilities/AdditionalScreens";
import {
  ClearLatestEnrollmentIdentifier,
  GetLatestEnrollmentIdentifier,
  OnComplete,
} from "./sampleAppControllerReference/SampleAppControllerReference";
import { DeveloperStatusMessages } from "./utilities/DeveloperStatusMessages";
import { LoginFlashUser } from "./utilities/CreateFlashUser";
import { uploadBiometricValidation } from "./services";
// import { VerifySignature } from "./utilities/VerifySignature";

export const App = ((): any => {
  let flashUserResult = "";
  let latestEnrollmentIdentifier = "";
  let latestProcessor:
    | LivenessCheckProcessor
    | EnrollmentProcessor
    | AuthenticateProcessor
    | PhotoIDMatchProcessor
    | PhotoIDScanProcessor;
  let latestSessionResult: FaceTecSessionResult | null = null;
  let latestIDScanResult: FaceTecIDScanResult | null = null;
  let localizedLanguage = require('../core-sdk-optional/FaceTecStrings.es.js');

  window.onload = async (): Promise<void> => {
    const checkboxTermsConditions = document.getElementById(
      "fv-terms-and-conditions",
    ) as HTMLInputElement;

    const flashUser = await LoginFlashUser(Config.email!, Config.password!);
    flashUserResult = flashUser.uuid;


    SampleAppUtilities.formatUIForDevice();
    FaceTecSDK.setResourceDirectory("../../core-sdk/FaceTecSDK.js/resources");
    FaceTecSDK.setImagesDirectory("../../core-sdk/FaceTec_images");
    ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme());

    Config.initializeFromAutogeneratedConfig(
      FaceTecSDK,
      function (initializedSuccessfully: boolean) {
        if (initializedSuccessfully) {
          checkboxTermsConditions.disabled = false;
          checkboxTermsConditions?.addEventListener("change", () => {
            if (checkboxTermsConditions.checked) {
              SampleAppUtilities.enableControlButtons();
              SampleAppUtilities.setVocalGuidanceSoundFiles();
              SampleAppUtilities.setVocalGuidanceMode();
              SampleAppUtilities.setOCRLocalization();
              FaceTecSDK.configureLocalization(localizedLanguage)

              AdditionalScreens.setServerUpgradeStyling(
                document.getElementById("controls")!,
                exitAdditionalScreen,
              );
            } else {
              SampleAppUtilities.disableControlButtons();
            }
          });
        }
        console.log(FaceTecSDK.version());
        DeveloperStatusMessages.logInitializeResult();
      },
    );

    SampleAppUtilities.fadeInMainUIContainer();
  };

  function initializeResultObjects(): void {
    latestSessionResult = null;
    latestIDScanResult = null;
  }

  function onLivenessCheckPressed(): void {
    initializeResultObjects();
    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    getSessionToken((sessionToken?: string): void => {
      latestProcessor = new LivenessCheckProcessor(sessionToken as string, App);
    });
  }

  function onEnrollUserPressed(): void {
    initializeResultObjects();
    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    getSessionToken((sessionToken?: string) => {
      latestEnrollmentIdentifier =
        "browser_sample_app_" + SampleAppUtilities.generateUUId();
      latestProcessor = new EnrollmentProcessor(sessionToken as string, App);
    });
  }

  function onAuthenticateUserPressed(): void {
    initializeResultObjects();

    if (latestEnrollmentIdentifier.length === 0) {
      DeveloperStatusMessages.logAndDisplayMessage(
        "Please enroll first before trying authentication.",
      );
    } else {
      SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

      getSessionToken((sessionToken?: string): void => {
        latestProcessor = new AuthenticateProcessor(
          sessionToken as string,
          App,
        );
      });
    }
  }

  function onPhotoIDMatchPressed(): void {
    initializeResultObjects();
    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    getSessionToken((sessionToken?: string): void => {
      latestEnrollmentIdentifier =
        "browser_sample_app_" + SampleAppUtilities.generateUUId();
      latestProcessor = new PhotoIDMatchProcessor(sessionToken as string, App);
    });
  }

  function onPhotoIDScanPressed(): void {
    initializeResultObjects();
    SampleAppUtilities.fadeOutMainUIAndPrepareForSession();

    getSessionToken(function (sessionToken?: string) {
      latestProcessor = new PhotoIDScanProcessor(sessionToken as string, App);
    });
  }

  // Show the final result with the Session Review Screen.
  let onComplete: OnComplete;

  onComplete = async (
    sessionResult: FaceTecSessionResult | null,
    idScanResult: FaceTecIDScanResult | null,
    latestNetworkResponseStatus: number,
  ): Promise<void> => {
    latestSessionResult = sessionResult;
    latestIDScanResult = idScanResult;
    // TODO: Uncomment validation for INE with RENAPO
    // let templateMatches = [
    //   'Mexico - ID Card (Voter) - 2020_UC - Horizontal [v9]',
    //   'Mexico - ID Card (Voter) - 2018 - Horizontal [v3]',
    //   'Mexico - ID Card (Voter) - 2013 - Horizontal [v4]'
    // ];
    // let templateInfo = JSON.parse(localStorage.getItem('templateInfo')!); // Remove non null assertion

    if (latestProcessor.isSuccess()) {
      // Realizar proceso de Validacion de CURP con Renapo
      // Validar que el template sea INE (array de templates etc...)
      // Validar curp con renapo
      // if (templateInfo && templateMatches.includes(templateInfo.templateName)) {
      //   let curp = localStorage.getItem('curp')!;
      //   console.log(curp)
      // }
      localStorage.setItem(
        "biometrics",
        JSON.stringify({ latestIDScanResult, flashUserResult }),
      );

      // let requireVideo = localStorage.getItem('require_video');
      // if (requireVideo) {
      //   window.location.href = "./agreement";
      // } else 
      try {
        const loader: HTMLDivElement = document.getElementById(
          "fv-loader-curtain",
        ) as HTMLDivElement;
        const modalError: HTMLElement = document.getElementById(
          "fv-modal-error",
        ) as HTMLDivElement;
        const contractData: string = localStorage.getItem("contractData") as string;
        const biometrics: string = localStorage.getItem("biometrics") as string;
        const parsedBiometrics = JSON.parse(biometrics);

        if (!contractData || !parsedBiometrics) {
          console.error("Missing contract data or biometrics data.");
          if (modalError) modalError.style.visibility = "visible";
          return;
        }

        const biometryData = {
          status: parsedBiometrics.latestIDScanResult.status ?? false,
          session_id: parsedBiometrics.latestIDScanResult.sessionId,
          is_done: parsedBiometrics.latestIDScanResult.isCompletelyDone,
          scan_id: parsedBiometrics.latestIDScanResult.idScan,
          back_image: parsedBiometrics.latestIDScanResult.backImages[0],
          front_image: parsedBiometrics.latestIDScanResult.frontImages[0],
        }

        const documentData = JSON.parse(contractData);
        const identificationData = JSON.parse(localStorage.getItem('documentData')!);

        const ip = await fetch(Config.ipBaseURL ?? "");
        const ipData = await ip.json();

        const data = {
          files: {
            biometry: biometryData,
            data: identificationData
          },
          document_id: parseInt(documentData.documentId),
          signer_id: parseInt(documentData.signerId),
          ip_address: ipData.ip,
        }

        loader.style.visibility = "visible";
        const response = await uploadBiometricValidation(data);

        if (response?.ok) {
          loader.style.visibility = "hidden";
          window.location.href = "./signature";
        } else {
          console.error(response);
          loader.style.visibility = "hidden";
          if (modalError) modalError.style.visibility = "visible";
        }
      }
      catch (err) {
        console.error(err);
      }

      // window.location.href = "./choose";
      DeveloperStatusMessages.displayMessage("Now you will be redirected to the next step.");
    } else {
      DeveloperStatusMessages.logScanOncompleteResult(
        sessionResult,
        idScanResult,
      );

      if (
        isNetworkResponseServerIsOffline(latestNetworkResponseStatus) === true
      ) {
        showAdditionalScreensServerIsDown();
        return;
      }
    }

    SampleAppUtilities.showMainUI();
  };

  function isNetworkResponseServerIsOffline(
    networkResponseStatus: number,
  ): boolean {
    return networkResponseStatus >= 500;
  }

  function onDesignShowcasePressed(): void {
    ThemeHelpers.showNewTheme();
  }

  function onVocalGuidanceSettingsButtonPressed(): void {
    SampleAppUtilities.setVocalGuidanceMode();
  }

  function onViewAuditTrailPressed(): void {
    SampleAppUtilities.showAuditTrailImages(
      latestSessionResult,
      latestIDScanResult,
    );
  }

  let sessionTokenErrorHasBeenHandled = false;

  function onSessionTokenError(xhrStatus: number | undefined): void {
    if (sessionTokenErrorHasBeenHandled === false) {
      sessionTokenErrorHasBeenHandled = true;

      if (
        xhrStatus !== undefined &&
        isNetworkResponseServerIsOffline(xhrStatus)
      ) {
        showAdditionalScreensServerIsDown();
      } else {
        onServerSessionTokenError();
      }
    }
  }

  function getSessionToken(
    sessionTokenCallback: (sessionToken: string) => void,
  ): void {
    sessionTokenErrorHasBeenHandled = false;
    console.log(Config.ApiKeyName, Config.ApiKeyValue);
    try {
      const XHR = new XMLHttpRequest();
      XHR.open("GET", Config.BaseURL + "/session-token");
      XHR.setRequestHeader(
        "X-Device-Key",
        Config.DeviceKeyIdentifier as string,
      );
      XHR.setRequestHeader(
        "X-User-Agent",
        FaceTecSDK.createFaceTecAPIUserAgentString(""),
      );
      XHR.setRequestHeader(
        Config.ApiKeyName as string,
        Config.ApiKeyValue as string,
      );

      XHR.onreadystatechange = function (): void {
        if (this.readyState === XMLHttpRequest.DONE) {
          let sessionToken = "";

          try {
            sessionToken = JSON.parse(this.responseText).sessionToken;

            if (typeof sessionToken !== "string") {
              onSessionTokenError(XHR.status);
              return;
            }
          } catch {
            XHR.abort();
            onSessionTokenError(XHR.status);
            return;
          }

          SampleAppUtilities.hideLoadingSessionToken();
          sessionTokenCallback(sessionToken);
        }
      };

      window.setTimeout(() => {
        if (XHR.readyState !== XMLHttpRequest.DONE) {
          if (sessionTokenErrorHasBeenHandled === false) {
            SampleAppUtilities.showLoadingSessionToken();
          }
        }
      }, 3000);

      XHR.onerror = function (): void {
        XHR.abort();
        onSessionTokenError(XHR.status);
      };

      XHR.send();
    } catch (e) {
      onSessionTokenError(undefined);
    }
  }

  function showAdditionalScreensServerIsDown(): void {
    AdditionalScreens.showServerUpGradeView();
  }

  function onServerSessionTokenError(): void {
    SampleAppUtilities.handleErrorGettingServerSessionToken();
  }

  const getLatestEnrollmentIdentifier: GetLatestEnrollmentIdentifier =
    (): string => {
      return latestEnrollmentIdentifier;
    };

  const clearLatestEnrollmentIdentifier: ClearLatestEnrollmentIdentifier =
    () => {
      latestEnrollmentIdentifier = "";
    };

  function exitAdditionalScreen(): void {
    AdditionalScreens.exitAdditionalScreen(SampleAppUtilities.showMainUI);
  }

  return {
    onLivenessCheckPressed,
    onEnrollUserPressed,
    onAuthenticateUserPressed,
    onPhotoIDMatchPressed,
    onPhotoIDScanPressed,
    onDesignShowcasePressed,
    onComplete,
    getLatestEnrollmentIdentifier,
    clearLatestEnrollmentIdentifier,
    onVocalGuidanceSettingsButtonPressed,
    onViewAuditTrailPressed,
    latestSessionResult,
    latestIDScanResult,
  };
})();
